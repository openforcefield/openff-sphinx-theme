// The Numpydoc API layout

$api-name-color: $primary;
$api-property-color: darken($green, 10);
$api-path-color: $grey;
$api-bg-color: rgba($openff-toolkit-blue, 0.1);
$api-param-symbol-color: $openff-evaluator-orange;
$api-param-name-color: $openff-toolkit-blue;
$api-param-value-color: $grey-dark;
$api-type-color: $grey-dark;
$api-source-link-color: $openff-evaluator-orange;

$api-header-font-size: 1.1rem;
$api-header-padding: 1 * $api-header-font-size;
$api-arguments-indent: 2 * $api-header-font-size;

// Definition of an object. Hopefully.
// Could also use dl.py, but this would fail
// if we ever wanted to document something that
// isn't Python
// RTD does it like this, but with fewer exceptions, so
// we should be OK
dl:not(.docutils):not(.field-list):not(.simple):not(.citation):not(.option-list):not(.footnote)[class] {
    // Give ourselves some more room on big screens
    @media screen and (min-width: $widescreen) and (max-width: $fullhd - 1) {
        margin-left: calc(-0.5 * (#{$api-widescreen-width} - #{$para-width}));
        width: $api-widescreen-width;
    }
    @media screen and (min-width: $fullhd) {
        margin-left: -0.5 * ($api-fullhd-width - $para-width);
        width: $api-fullhd-width;
    }
    padding-bottom: 0.5em;
    @include z-depth(2);
    // Header and signature
    > dt {
        font-family: $family-monospace;
        font-size: $api-header-font-size;
        padding: $api-header-padding;
        background-color: $api-bg-color;
        border-radius: 4px;
        // Allow words to break anywhere, if necessary
        overflow-wrap: break-word;
        // Position relative so we can absolutely position source link
        position: relative;
        &:target {
            &::before {
                background-color: $body-background-color;
            }
        }

        // Hide any naked text nodes at this level
        // This hides Sphinx's commas so we can put our own in
        font-size: 0;
        * {
            font-size: $api-header-font-size;
        }

        // Indent the argument list
        padding-left: $api-header-padding + $api-arguments-indent;
        > :first-child {
            margin-left: -$api-arguments-indent;
        }

        // Text specifying class, function, method, pydantic model, etc. Not always present, eg for plain functions
        > .property .pre {
            color: $api-property-color;
            font-size: inherit;

        }

        // Name of a parameter
        .n > .pre {
            color: $api-param-name-color;
        }
        // Symbols; equals sign, asterisk, etc
        .o > .pre {
            color: $api-param-symbol-color;
            padding-left: 0.2em;
            padding-right: 0.2em;
        }
        // Type annotation
        .p, .p + .n, .p + .w + .n {
            .pre {
                color: $api-type-color;
            }
        }
        // Links
        a {
            font-weight: 550;
            &:hover {
                .pre, pre, code {
                    color: $link-hover !important;
                }
            }
        }
        // Text providing path to the object
        > .sig-prename {
            padding: 0;
            background-color: transparent;
            font-weight: 200;
            font-size: inherit;
            color: $api-path-color;
        }
        // Text providing the name of the object
        > .sig-name {
            padding: 0;
            background-color: transparent;
            color: $api-name-color;
            font-weight: 600;
            font-size: inherit;
            // autodoc_pydantic produces types as properties _after_ the sig name
            ~ .property .pre {
                color: $api-type-color;
                font-style: normal;
            }

            // If the source link immediately follows the name, don't position it absolutely
            + a.reference.internal .viewcode-link {
                position: static !important;
                float: right;
                margin-left: 0.5em;
            }
        }
        // Opening and closing parenthesis
        > .sig-paren {

        }
        // Each parameter
        > .sig-param {
            font-style: normal;
            padding-left: $api-arguments-indent;
            text-indent:-$api-arguments-indent;
            display: block;
            // Entire parameter if parsing the parameter has failed. Splits on commas
            > .pre {
                color: $api-param-name-color;
            }
            // Prevent line breaks immediately after operators
            > .o, > .w + .p {
                + .w {
                    white-space: nowrap;
                }
            }
            // Default values of arguments
            > .default_value > .pre {
                color: $api-param-value-color;
            }
            // After each parameter, comma
            &::after {
                content: ",";
            }
        }
        // Brackets [] denoting optional arguments
        // This is redundant information and I am displeased to have to support it
        > .optional {
            // Put optional [] brackets on their own lines
            &::after {
                content: "\a";
                white-space: pre;
            }
        }
        // Closing parenthesis
        .sig-param, .optional {
            + .sig-paren {
                // Unindent closing paren, and everything following (except source link)
                position: relative;
                left: -$api-arguments-indent;
                ~*:not(a.reference.internal, .headerlink) {
                    position: relative;
                    left: -$api-arguments-indent;
                    max-width: calc(100% + #{$api-arguments-indent} - 4em);
                    display: inline-block;
                    vertical-align: top;
                }
                ~ .headerlink {
                    position: absolute;
                    bottom: $api-header-padding;
                    right: $api-header-padding;
                }
            }
        }
        // Return arrow
        .sig-return-icon {
            font-size: 2em;
            line-height: 0;
            margin-left: 0.5rem;
        }
        .sig-return-typehint {
            color: $api-type-color;
            a {
                color: $api-type-color;
                font-weight: 550;
            }
        }
        // Pydantic validator arrow
        .autodoc_pydantic_validator_arrow {
            &::before {
                content: "\a";
                white-space: pre;
            }
            // Comma separating validated fields
            ~ .property {
                &::after {
                    content: "\a      ";
                    white-space: pre;
                }
            }
            ~ .headerlink {
                position: absolute;
                bottom: $api-header-padding;
                right: $api-header-padding;
            }
        }
        // Link to the source code for the object (not present on inherited objects)
        .viewcode-link {
            position: absolute;
            top: $api-header-padding;
            right: $api-header-padding;
            color: $api-source-link-color;
            font-size: $pre-font-size;
            font-weight: normal;
            &:hover {
                color: $link-hover;
            }
        }
        // Permalink to the object (to here)
        > a.headerlink {
            font-size: $api-header-font-size;
            opacity: 1;
            transform: translate(0);
        }
    }
    // Content
    >dd {
        margin: 1em;
        &:empty {
            padding-bottom: 0 !important;
        }
        // Description/docstring
        >p {

        }
        // JSON schema for pydantic stuff
        >.autodoc_pydantic_collapsable_json {
        }
        // Parameters, Returns, Other Parameters, Raises sections
        >.field-list {
            // Headings
            >dt {
                @extend .rubric;
            }
            // Content
            >dd {
                >ul.simple {
                    margin-left: 0;
                }
                >ul.simple:first-child>li {
                    list-style: none;
                    margin-left: 0;
                }
                >dl>dt, >ul.simple:first-child>li>p:first-child, >p:first-child {
                    // Name of the parameter or return value
                    >strong {
                        font-family: $family-monospace;
                        color: $api-param-name-color;
                        font-weight: normal;
                    }
                    // Type of the parameter, or type of a named return value
                    >.classifier {
                        font-family: $family-monospace;
                        color: $api-type-color;
                        overflow-wrap: break-word;
                    }
                    >a.reference>em {
                        font-family: $family-monospace;
                        font-style: normal;
                    }
                }
                >dl>dt>strong::after {
                    content: ": ";
                }
                // Description of the parameter, return value, or exception
                >dl>dd, >ul.simple:first-child>li>p:not(:first-child) {
                    margin-top: 0;
                    margin-bottom: 0.5em;
                }
            }
        }
        // Notes, References, Methods, Attributes, and Examples headings
        >.rubric {

        }
        // Reference list (bibliography)
        >dl.citation {

        }
        // Doctests - already nicely formatted!
        >.doctest {

        }
        // Tables of methods, attributes, classes, etc.
        // Should probably style this globally so it captures the same tables in autosummary directives
        >.longtable.docutils {
            // A row of the table
            tr {
                //An odd row
                *.row-odd {

                }
                //An even row
                *.row-even {

                }
                // An entry on the LHS of the table - link to another object + possibly a signature
                // Signature is a direct child of this element
                td:first-child {
                    // May need to style everything in td:first-child, then re-overwrite things here
                    a.reference code {

                    }
                }
                // An entry on the RHS of the table - description
                td:last-child {

                }

            }

        }
        // Child object - recapitulates structure above
        >dl:not(.docutils):not(.field-list):not(.simple):not(.citation):not(.option-list):not(.footnote)[class] {
            @media screen and (min-width: $widescreen) {
                margin-left: 0;
                width: 100%;
            }
            padding-bottom: 0;
            @include z-depth(4);
            border-radius: 4px;
            // Inner object header and signature
            > dt {
                border-radius: 0px;
            }
            // Inner object body
            > dd {
                margin-right: 1.5em;
                margin-left: 1.5em;
                padding-bottom: 0.75em;
            }
        }
    }

    // Don't justify/hyphenate in API
    // Undoes styling found by searching "@if hyphenate" in sphinx-api.scss
    p {
        hyphens: none;
        text-align: unset;
    }
}

// Pydantic fields have their own stuff going on
// We still want types to be the right colour
// This works as long as the type annotation is defined,
// but can cause the field's name to be recoloured if eg no
// type is defined and the field has an alias
.pydantic_field .sig {
    > .sig-name + .property:not(:last-of-type) {
        a {
            font-weight: bold;
        }
        .pre {
            color: $api-type-color;
        }
    }
}

details.autodoc_pydantic_collapsable_json > summary {
    max-width: 42.5rem;
    margin-left: auto;
    margin-right: auto;
}

// Break headings wherever, if necessary
h1, h2, h3, h4, h5, h6 {
    overflow-wrap: break-word;
}

// Docs button in source on right
.viewcode-back {
  float: right;
  color: $api-source-link-color;
}
